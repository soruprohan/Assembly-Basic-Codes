; UNCONDITIONAL JUMP SYNTAX :

; LABEL_NAME:
; INSTRUCTIONS AND EXECUTE
; JMP LABEL_NAME

; CONDITIONAL JUMP : J<CONDITION> LABEL_NAME ---> BAKI SYNTAX AGER MOTOI

; JC--> JUMP IF CARRY FLAG(CF) IS 1
; JNC--> JUMP IF CARRY FLAG(CF) IS 0
; JE/JZ--> JUMP IF (ZERO,EQUAL) ZERO FLAG(ZF) IS 1
; JNE/JNZ--> JUMP IF (NOT ZERO,NOT EQUAL) ZERO FLAG(ZF) IS 0
; JP/JPE--> JUMP IS <PARITY,EVEN_PARITY> PARITY FLAG(PF) IS 1
; JNP/JPO--> JUMP IS <NOT PARITY,ODD_PARITY> PARITY FLAG(PF) IS 0

; COMPARE INSTRUCTIONS : BASICALLY SUBTRACTS SOURCE, FROM DESTINATION,, INS DESTINATION, SOURCE...
 
; CAN COMPARE (REG,VAR)..(REG,CONSTANT),(REG THAT IS HOLDING MEMORY ADDRES, WITH ANOTHER ADDRESS>   
; CX=BX,,EQUAL--> CF=0, ZF=1, SF=0
; CX>BX,,GETTER--> CF=0, ZF=0, SF=0
; CX<BX,,LESSER--> CF=1, ZF=0, SF=1

ORG 100H

.MODEL SMALL

.DATA
    MSG1 DB 10, 13, "ENTER TWO DIGITS : $"
    MSG2 DB 10, 13, "DIGITS ARE EQUAL$"
    MSG3 DB 10, 13, "DIGITS ARE NOT EQUAL$" 

.CODE

  MAIN PROC
    
    MOV AX, @DATA
    MOV DX, AX
    
    MOV DX, OFFSET MSG1
    MOV AH, 009H
    INT 21H
     
    MOV AH, 001H
    INT 21H
    MOV BL, AL
    INT 21H
    MOV CL, AL
    
    CMP CL, BL
    JE EQUAL
    JMP NOT_EQUAL
    
    EQUAL:
    MOV DX, OFFSET MSG2
    MOV AH, 9
    INT 21H
    JMP DONE ; EIKHANE ETA NA DILE DEKHA JABE, NOT EQUAL E SOMOSSA HOBE NA ,KINTU EQUAL HOILA EQUAL LABEL EXECUTE KORAR POR NOT_EQUAL TAO EXECUTE KORTISA
    
    NOT_EQUAL:
    MOV DX, OFFSET MSG3
    MOV AH, 9
    INT 21H
    
    DONE:
    

RET